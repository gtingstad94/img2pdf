# -*- coding: utf-8 -*-
"""img2pdf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HXiaUHpugNlswm1dqHPfyK5Q_QmbYJtB
"""

from PIL import Image, ImageFile
import numpy as np
import pillow_avif
ImageFile.LOAD_TRUNCATED_IMAGES = True
import glob
import os
import sys
#from googletrans import Translator, constants
from pprint import pprint
#from django.utils.text import slugify

def imgdir2pdf(given_path, compression):
  fse = sys.getfilesystemencoding()

  pdf_path = os.path.join(given_path,'pdf_files')
  print(pdf_path + '\n')
  if pdf_path not in glob.glob(os.path.join(given_path,'*')):
    os.mkdir(pdf_path)

  comic_dir = sorted(glob.glob(os.path.join(given_path,'*')))
  for folder in comic_dir:
    flag = False
    if pdf_path in folder:
      continue

    name = folder.split('\\')[-1]
    pdf_name = os.path.join(pdf_path, name + '.pdf')
    new_name = name.replace('[','(')
    new_name = new_name.replace(']',')')
    if new_name != name:
      name = new_name
      newpath = os.path.join('\\'.join(folder.split('\\')[:-1]), name)
      os.rename(folder, newpath)
      folder = newpath
      pdf_name = os.path.join(pdf_path, name + '.pdf')

    #This was used to rename folders with illegal characters.
    #Since replacing square brackets, it appears that it's no longer required.
    '''if not glob.glob(os.path.join(folder,'*')):
      translator = Translator()
      translation = translator.translate(name)
      name = slugify(translation.text)
      newpath = os.path.join('\\'.join(folder.split('\\')[:-1]), name)
      pdf_name = os.path.join(pdf_path, name + '.pdf')
      os.rename(folder, newpath)
      folder = newpath'''

    if pdf_name in glob.glob(os.path.join(pdf_path,'*')):
      flag = True
      continue

    images = []
    img_dir = os.path.join(folder,'*')
    legal_files = ['.jpg', '.jpeg', '.jfif', '.pjpeg', '.pjp', '.png', '.avif']
    print(name)
    img_files = glob.glob(u'{}'.format(img_dir))
    for img_file in img_files:
      if any(x in img_file for x in legal_files):
        img = Image.open(img_file)
        scale_size = 2000
        if img.size[1] > scale_size:
          img = img.resize((int(scale_size/img.size[1]*img.size[0]),scale_size), resample=Image.Resampling.BICUBIC)
        np_img = np.array(img).astype(float)
        if len(np_img.shape) == 3:
          wd = int(img.size[0]/2)
          ht = int(img.size[1]/2)
          total_dif = np.sum(np.abs(np_img[ht-125:ht+125,wd-125:wd+125,0]-np_img[ht-125:ht+125,wd-125:wd+125,1]) \
                           + np.abs(np_img[ht-125:ht+125,wd-125:wd+125,0]-np_img[ht-125:ht+125,wd-125:wd+125,2]) \
                           + np.abs(np_img[ht-125:ht+125,wd-125:wd+125,1]-np_img[ht-125:ht+125,wd-125:wd+125,2]))
          if total_dif < 200:
              img = img.convert('L')
          else:
              img = img.convert('RGB')
        else:
          img = img.convert('L')

        images.append(img)
    if flag == True:
      continue
    if images:
      images[0].save(pdf_name, save_all=True, append_images=images[1:], optimize = True, quality = int(compression))
  return

comic_dir = input('Enter Directory of Raw Directories: ')
compression = input('Enter a compression value from 0 to 100 (85 or higher recommended)\nFor highest quality, enter 100: ')
imgdir2pdf(comic_dir, compression)
input('Conversion Complete\nPress enter to close')
